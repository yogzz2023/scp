#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/stat.h>
#include <libssh/libssh.h>
#include <libssh/sftp.h>

#define MAX_BUF_SIZE 4096

int main(int argc, char *argv[]) {
    ssh_session session;
    sftp_session sftp;
    int rc, access_type, fd, nread, status;
    char buf[MAX_BUF_SIZE];
    struct stat file_info;
    sftp_file file;

    if (argc != 3) {
        fprintf(stderr, "Usage: %s local_file remote_path\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    const char *local_file = argv[1];
    const char *remote_path = argv[2];

    // Initialize SSH session
    session = ssh_new();
    if (session == NULL) {
        fprintf(stderr, "Error creating SSH session.\n");
        exit(EXIT_FAILURE);
    }

    ssh_options_set(session, SSH_OPTIONS_HOST, "remote_host");
    ssh_options_set(session, SSH_OPTIONS_USER, "remote_user");

    // Connect to the SSH server
    rc = ssh_connect(session);
    if (rc != SSH_OK) {
        fprintf(stderr, "Error connecting to SSH server: %s\n", ssh_get_error(session));
        ssh_free(session);
        exit(EXIT_FAILURE);
    }

    // Authenticate with the SSH server
    rc = ssh_userauth_publickey_auto(session, NULL, NULL);
    if (rc != SSH_AUTH_SUCCESS) {
        fprintf(stderr, "Error authenticating with SSH server: %s\n", ssh_get_error(session));
        ssh_disconnect(session);
        ssh_free(session);
        exit(EXIT_FAILURE);
    }

    // Initialize SFTP session
    sftp = sftp_new(session);
    if (sftp == NULL) {
        fprintf(stderr, "Error creating SFTP session: %s\n", ssh_get_error(session));
        ssh_disconnect(session);
        ssh_free(session);
        exit(EXIT_FAILURE);
    }

    // Connect to SFTP server
    rc = sftp_init(sftp);
    if (rc != SSH_OK) {
        fprintf(stderr, "Error connecting to SFTP server: %s\n", ssh_get_error(session));
        sftp_free(sftp);
        ssh_disconnect(session);
        ssh_free(session);
        exit(EXIT_FAILURE);
    }

    // Open local file
    fd = open(local_file, O_RDONLY);
    if (fd < 0) {
        fprintf(stderr, "Error opening local file: %s\n", strerror(errno));
        sftp_free(sftp);
        ssh_disconnect(session);
        ssh_free(session);
        exit(EXIT_FAILURE);
    }

    // Get local file info
    rc = fstat(fd, &file_info);
    if (rc != 0) {
        fprintf(stderr, "Error getting local file info: %s\n", strerror(errno));
        close(fd);
        sftp_free(sftp);
        ssh_disconnect(session);
        ssh_free(session);
        exit(EXIT_FAILURE);
    }

    // Set access type for remote file
    access_type = O_WRONLY | O_CREAT | O_TRUNC;
    file = sftp_open(sftp, remote_path, access_type, S_IRUSR | S_IWUSR);
    if (file == NULL) {
        fprintf(stderr, "Error opening remote file: %s\n", ssh_get_error(session));
        close(fd);
        sftp_free(sftp);
        ssh_disconnect(session);
        ssh_free(session);
        exit(EXIT_FAILURE);
    }

    // Copy local file to remote file
   
while ((nread = read(fd, buf, sizeof(buf))) > 0) {
    rc = sftp_write(file, buf, nread);
    if (rc != nread) {
        fprintf(stderr, "Error writing to remote file: %s\n", ssh_get_error(session));
        close(fd);
        sftp_close(file);
        sftp_free(sftp);
        ssh_disconnect(session);
        ssh_free(session);
        exit(EXIT_FAILURE);
    }
}

// Check for errors during file read
if (nread < 0) {
    fprintf(stderr, "Error reading from local file: %s\n", strerror(errno));
    close(fd);
    sftp_close(file);
    sftp_free(sftp);
    ssh_disconnect(session);
    ssh_free(session);
    exit(EXIT_FAILURE);
}

// Set permissions for remote file
rc = sftp_fstat(file, &file_info);
if (rc != SSH_OK) {
    fprintf(stderr, "Error getting file info for remote file: %s\n", ssh_get_error(session));
    close(fd);
    sftp_close(file);
    sftp_free(sftp);
    ssh_disconnect(session);
    ssh_free(session);
    exit(EXIT_FAILURE);
}
rc = sftp_chmod(file, file_info.st_mode & 07777);
if (rc != SSH_OK) {
    fprintf(stderr, "Error setting permissions for remote file: %s\n", ssh_get_error(session));
    close(fd);
    sftp_close(file);
    sftp_free(sftp);
    ssh_disconnect(session);
    ssh_free(session);
    exit(EXIT_FAILURE);
}

// Close remote file
rc = sftp_close(file);
if (rc != SSH_OK) {
    fprintf(stderr, "Error closing remote file: %s\n", ssh_get_error(session));
    close(fd);
    sftp_free(sftp);
    ssh_disconnect(session);
    ssh_free(session);
    exit(EXIT_FAILURE);
}

// Close local file
close(fd);

// Free SFTP session
sftp_free(sftp);

// Disconnect from SSH server
ssh_disconnect(session);

// Free SSH session
ssh_free(session);

exit(EXIT_SUCCESS);
}
